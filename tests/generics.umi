class Parent {
    Parent() {}
    Void talk() { print("Hello") }
}

class Child : Parent {
    Child() {}
    Void talk() { print("bazinga!") }
}

class Pair[T, U] {
    mut T first
    mut U second

    Pair[T, U]() {}

    T getFirst() { this.first }
}

T identity[T](T thing) {
    T temp = thing
    temp
}

# I recognise that this example is stupid because the generic is completely unnecessary
Void saySomething[T : Parent](T person) {
    person.talk()
}


Void main() {
    Int i = identity[Int](1)
    Bool b = identity[Bool](true)
    print(i)
    print(b)

    saySomething[Parent](Parent())
    saySomething[Child](Child())

    Pair[Int, Int] int_int = Pair[Int, Int]()
    int_int.first = 2
    int_int.second = 3
    print(int_int.getFirst() + int_int.second)
}
