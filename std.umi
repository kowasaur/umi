# This is the standard library, included by default in all umi programs

il class Void "void" {}
il class Int "int32" {}
il class Bool "bool" {}
il class Char "char" {}

il class String "string" {
    ilf Char get(Int) "get_Chars"
}

il class Array[T] "{0}[]" {
    il Array[T](Int) "newarr {0}"
    il Void set(Int, T) "stelem {0}"
    il T get(Int) "ldelem {0}"
    il Int len() "ldlen"
}

il class Console "[mscorlib]System.Console" {
    ilf static Void write(String) "Write"
    ilf static Void write(Int) "Write"
    ilf static Void write(Char) "Write"
}

ilf Void print(String) "[mscorlib]System.Console::WriteLine"
ilf Void print(Char) "[mscorlib]System.Console::WriteLine"
ilf Void print(Int) "[mscorlib]System.Console::WriteLine"
ilf Void print(Bool) "[mscorlib]System.Console::WriteLine"

ilf String input() "[mscorlib]System.Console::ReadLine"
# TODO: Maybe add inline functions
String input(String prompt) {
    Console.write(prompt)
    input()
}

ilf Void exit(Int) "[mscorlib]System.Environment::Exit"

ilf String +(String, String) "string::Concat"

# Arithmetic Operators
il Int +(Int, Int) "add"
il Int -(Int, Int) "sub"
il Int *(Int, Int) "mul"
il Int /(Int, Int) "div"
il Int %(Int, Int) "rem"
il Int -(Void, Int) "neg"

# Comparison Operators
ilf Bool ==(String, String) "string::op_Equality"
il Bool ==(Bool, Bool) "ceq"
il Bool ==(Int, Int) "ceq"
ilf Bool !=(String, String) "string::op_Inequality"
Bool !=(Bool a, Bool b) { (a == b) == false }
Bool !=(Int a, Int b) { (a == b) == false }
il Bool >(Int, Int) "cgt"
il Bool <(Int, Int) "clt"
Bool >=(Int a, Int b) { !(a < b) }
Bool <=(Int a, Int b) { !(a > b) }

# Logical Operators
il Bool &&(Bool, Bool) "and"
il Bool ||(Bool, Bool) "or"
Bool !(Void _, Bool a) { a == false }

# Bitwise Operators
il Int <<(Int, Int) "shl"
il Int >>(Int, Int) "shr"
il Int &(Int, Int) "and"
il Int |(Int, Int) "or"
