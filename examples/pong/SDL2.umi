include "-unsafe SDL2.cs SDL2_ttf.cs"

il class Byte : Int "unsigned int8" { il Byte(Int) "" }

il class UInt "unsigned int32" { il UInt(Int) "" }
il UInt |(UInt, UInt) "or"

il class Pointer "native int" {
    # TODO: convert to il field
    il static Pointer null() "ldsfld native int [mscorlib]System.IntPtr::Zero"
}

ils Bool ==(Pointer, Pointer) "native int::op_Equality"

il class SDL_WindowFlags "SDL2.SDL/SDL_WindowFlags" {
    il SDL_WindowFlags(Int) ""
    alias SHOWN = SDL_WindowFlags(0x00000004)
}

il class SDL_RendererFlags "SDL2.SDL/SDL_RendererFlags" {
    il SDL_RendererFlags(Int) ""
    alias ACCELERATED = SDL_RendererFlags(0x00000002)
}

il class SDL_EventType "SDL2.SDL/SDL_EventType" {
    il SDL_EventType(Int) ""
    alias QUIT = SDL_EventType(0x100)
    alias KEYDOWN = SDL_EventType(0x300)
}

il Bool ==(SDL_EventType, SDL_EventType) "ceq"

il class SDL_Event : Struct "SDL2.SDL/SDL_Event" {
    ils SDL_EventType type "'type'"
}

il class SDL_Rect : Struct "SDL2.SDL/SDL_Rect" {
    ils mut Int x "x"
    ils mut Int y "y"
    ils mut Int w "w"
    ils mut Int h "h"
}

il class SDL_RectF : Struct "SDL2.SDL/SDL_FRect" {
    ils mut Float x "x"
    ils mut Float y "y"
    ils mut Float w "w"
    ils mut Float h "h"
}

il class SDL_Color : Struct "SDL2.SDL/SDL_Color" {
    ils mut Byte r "r"
    ils mut Byte g "g"
    ils mut Byte b "b"
    ils mut Byte a "a"
}

il class SDL_AudioSpec : Struct "SDL2.SDL/SDL_AudioSpec" {}

il class SDL "SDL2.SDL" {
    ils static String getError() "SDL_GetError"

    # Init flags
    alias INIT_AUDIO = UInt(0x00000010)
    alias INIT_VIDEO = UInt(0x00000020)

    # The UInt is the init flags
    # Returns 0 on success and negative on failure
    ils static Int init(UInt) "SDL_Init"

    ils static Void quit() "SDL_Quit"

    alias WINDOWPOS_UNDEFINED =	0x1FFF0000
    alias WINDOWPOS_CENTERED = 0x2FFF0000

    ils static Pointer createWindow(String, Int, Int, Int, Int, SDL_WindowFlags) "SDL_CreateWindow"
    ils static Void destroyWindow(Pointer) "SDL_DestroyWindow"

    ils static Pointer createRenderer(Pointer, Int, SDL_RendererFlags) "SDL_CreateRenderer"
    ils static Void destroyRenderer(Pointer) "SDL_DestroyRenderer"

    ils static Int setRenderDrawColor(Pointer, Byte, Byte, Byte, Byte) "SDL_SetRenderDrawColor"
    ils static Int renderFillRect(Pointer, Ref[SDL_Rect]) "SDL_RenderFillRect"
    ils static Int renderFillRectF(Pointer, Ref[SDL_RectF]) "SDL_RenderFillRectF"
    ils static Int renderDrawRect(Pointer, Ref[SDL_Rect]) "SDL_RenderDrawRect"
    ils static Int renderClear(Pointer) "SDL_RenderClear"
    ils static Int renderCopy(Pointer, Pointer, Pointer, Ref[SDL_Rect]) "SDL_RenderCopy"
    ils static Void renderPresent(Pointer) "SDL_RenderPresent"

    ils static Pointer createTextureFromSurface(Pointer, Pointer) "SDL_CreateTextureFromSurface"
    ils static Void destroyTexture(Pointer) "SDL_DestroyTexture"

    ils static Void freeSurface(Pointer) "SDL_FreeSurface"

    alias SCANCODE_S = 22
    alias SCANCODE_W = 26
    alias SCANCODE_RETURN = 40
    alias SCANCODE_ESCAPE = 41
    alias SCANCODE_DOWN = 81
    alias SCANCODE_UP = 82

    # The Int is the array size
    ils static Pointer getKeyboardState(Ref[Int]) "SDL_GetKeyboardState"

    ils static Int pollEvent(Ref[SDL_Event]) "SDL_PollEvent"

    # Wait the specified number of milliseconds
    ils static Void delay(UInt) "SDL_Delay"

    ils static Pointer loadWAV(String, Ref[SDL_AudioSpec], Ref[Pointer], Ref[UInt]) "SDL_LoadWAV"
    ils static Void freeWAV(Pointer) "SDL_FreeWAV"
    
    ils static UInt openAudioDevice(Pointer, Int, Ref[SDL_AudioSpec], Ref[SDL_AudioSpec], Int) "SDL_OpenAudioDevice"
    ils static Void closeAudioDevice(UInt) "SDL_CloseAudioDevice"

    ils static Int queueAudio(UInt, Pointer, UInt) "SDL_QueueAudio"
    ils static Void clearQueuedAudio(UInt) "SDL_ClearQueuedAudio"
    ils static Void pauseAudioDevice(UInt, Int) "SDL_PauseAudioDevice"
}

il class TTF "SDL2.SDL_ttf" {
    ils static Int init() "TTF_Init"
    ils static Void quit() "TTF_Quit"

    ils static Pointer openFont(String, Int) "TTF_OpenFont"
    ils static Pointer renderTextSolid(Pointer, String, SDL_Color) "TTF_RenderText_Solid"
}

ils Void marshalCopy(Pointer, Array[Byte], Int, Int) "[mscorlib]System.Runtime.InteropServices.Marshal::Copy"
