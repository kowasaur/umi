include "math.umi"
include "SDL2.umi"
include "scenes.umi"

alias WINDOW_WIDTH = 1000
alias WINDOW_HEIGHT = 800
alias WINDOW_WIDTH_F = Float(WINDOW_WIDTH)
alias WINDOW_HEIGHT_F = Float(WINDOW_HEIGHT)

Void handleError(Int status) {
    if status < 0 {
        print(SDL.getError())
        exit(status)
    }
}

SDL_RectF changeRectF(SDL_RectF rect, Float change_x, Float change_y, Float obj_width, Float obj_height) {
    rect.x = clamp(rect.x + change_x, 0.0f, WINDOW_WIDTH_F - obj_width)
    rect.y = clamp(rect.y + change_y, 0.0f, WINDOW_HEIGHT_F - obj_height)
    rect
}

Array[Byte] getPressedKeys() {
    mut Int array_size = 0
    Pointer keys_ptr = SDL.getKeyboardState(ref array_size)
    Array[Byte] pressed_keys = Array[Byte](array_size)
    marshalCopy(keys_ptr, pressed_keys, 0, array_size)
    pressed_keys
}

Void drawMiddleLine(Pointer renderer) {
    mut SDL_Rect line = line
    line.x = WINDOW_WIDTH / 2 - 1
    line.y = 3
    line.w = 2
    line.h = 15
    while line.y < WINDOW_HEIGHT {
        Int err = SDL.renderFillRect(renderer, ref line)
        line.y = line.y + 30
    }
}

Void main() {
    if SDL.init(SDL.INIT_VIDEO | SDL.INIT_AUDIO) < 0 {
        print("Video initialisation failed")
        exit(1)
    }

    Pointer window = SDL.createWindow("Pong", SDL.WINDOWPOS_CENTERED, SDL.WINDOWPOS_CENTERED, WINDOW_WIDTH, WINDOW_HEIGHT, SDL_WindowFlags.SHOWN)
    Pointer renderer = SDL.createRenderer(window, -1, SDL_RendererFlags.ACCELERATED)
    mut Scene scene = Court2Players(renderer) 

    mut Bool quit = false
    while !quit {
        mut SDL_Event e = e
        while SDL.pollEvent(ref e) > 0 {
            if e.type == SDL_EventType.QUIT { quit = true }
        }

        scene = scene.nextScene(getPressedKeys(), renderer)

        SDL.setRenderDrawColor(renderer, Byte(0), Byte(0), Byte(0), Byte(255))
        SDL.renderClear(renderer)

        # everything except background is white
        SDL.setRenderDrawColor(renderer, Byte(255), Byte(255), Byte(255), Byte(255))
        scene.render(renderer)
        SDL.renderPresent(renderer)

        SDL.delay(UInt(1000 / 60))
    }

    SDL.destroyRenderer(renderer)
    SDL.destroyWindow(window)
    TTF.quit()
    SDL.quit()
}
